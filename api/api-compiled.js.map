{"version":3,"sources":["api.js"],"names":[],"mappings":"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","file":"api-compiled.js","sourcesContent":["import express from 'express';\r\nimport session from 'express-session';\r\nimport bodyParser from 'body-parser';\r\nimport config from '../src/config';\r\nimport * as actions from './actions/index';\r\nimport {mapUrl} from 'utils/url.js';\r\nimport PrettyError from 'pretty-error';\r\nimport http from 'http';\r\nimport SocketIo from 'socket.io';\r\n\r\nconst pretty = new PrettyError();\r\nconst app = express();\r\n\r\nconst server = new http.Server(app);\r\n\r\nconst io = new SocketIo(server);\r\nio.path('/ws');\r\n\r\napp.use(session({\r\n  secret: 'react and redux rule!!!!',\r\n  resave: false,\r\n  saveUninitialized: false,\r\n  cookie: { maxAge: 60000 }\r\n}));\r\napp.use(bodyParser.json());\r\n\r\n\r\napp.use((req, res) => {\r\n  const splittedUrlPath = req.url.split('?')[0].split('/').slice(1);\r\n\r\n  const {action, params} = mapUrl(actions, splittedUrlPath);\r\n\r\n  if (action) {\r\n    action(req, params)\r\n      .then((result) => {\r\n        if (result instanceof Function) {\r\n          result(res);\r\n        } else {\r\n          res.json(result);\r\n        }\r\n      }, (reason) => {\r\n        if (reason && reason.redirect) {\r\n          res.redirect(reason.redirect);\r\n        } else {\r\n          console.error('API ERROR:', pretty.render(reason));\r\n          res.status(reason.status || 500).json(reason);\r\n        }\r\n      });\r\n  } else {\r\n    res.status(404).end('NOT FOUND');\r\n  }\r\n});\r\n\r\n\r\nconst bufferSize = 100;\r\nconst messageBuffer = new Array(bufferSize);\r\nlet messageIndex = 0;\r\n\r\nif (config.apiPort) {\r\n  const runnable = app.listen(config.apiPort, (err) => {\r\n    if (err) {\r\n      console.error(err);\r\n    }\r\n    console.info('----\\n==> ðŸŒŽ  API is running on port %s', config.apiPort);\r\n    console.info('==> ðŸ’»  Send requests to http://%s:%s', config.apiHost, config.apiPort);\r\n  });\r\n\r\n  io.on('connection', (socket) => {\r\n    socket.emit('news', {msg: `'Hello World!' from server`});\r\n\r\n    socket.on('history', () => {\r\n      for (let index = 0; index < bufferSize; index++) {\r\n        const msgNo = (messageIndex + index) % bufferSize;\r\n        const msg = messageBuffer[msgNo];\r\n        if (msg) {\r\n          socket.emit('msg', msg);\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on('msg', (data) => {\r\n      data.id = messageIndex;\r\n      messageBuffer[messageIndex % bufferSize] = data;\r\n      messageIndex++;\r\n      io.emit('msg', data);\r\n    });\r\n  });\r\n  io.listen(runnable);\r\n} else {\r\n  console.error('==>     ERROR: No PORT environment variable has been specified');\r\n}\r\n"]}